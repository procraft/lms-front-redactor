import React, { useCallback, useContext, useEffect, useState } from 'react'
import { SavedBlockButtonStyled, SavedBlockStyled } from './styles'
import { RedactorComponentObject } from '../../../../../../RedactorComponent/interfaces'
import { LandingTemplateFrFragment } from '../../../../../../gql/landingTemplateFr'
import { AddWidgetButtonButtonProps } from '../../../buttons/interfaces'
import { LmsFrontRedactorContext } from '../../../../../../Context'
import { IconButton } from '@procraft/ui/dist/IconButton'
import { useDeleteLandingTemplateMutation } from '../../../../../../gql/deleteLandingTemplate'
import { useApolloClient } from '@apollo/client'

type SavedBlockProps = AddWidgetButtonButtonProps & {
  object: LandingTemplateFrFragment
  templates: LandingTemplateFrFragment[]
}

export const SavedBlock: React.FC<SavedBlockProps> = ({
  object,
  templates,
  addComponent,
  closeHandler,
}) => {
  const apolloClient = useApolloClient()

  const context = useContext(LmsFrontRedactorContext)

  /**
   * –•–æ—Ç—è —Ü–µ–ª–µ–≤–æ–π –±–ª–æ–∫ - –¥–∏–≤, –≤—Å–µ –∂–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω –∫–Ω–æ–ø–∫–∞.
   * –ü—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –º–µ–Ω—å—à–µ –≤—Å—è–∫–∏—Ö —Å—Ç–∏–ª–µ–π –±—ã–ª–æ –ø—Ä–∏–º–µ—à–µ–Ω–æ.
   */
  const [button, buttonSetter] = useState<HTMLDivElement | null>(null)

  /**
   * –ù–∞–≤–µ—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
   */
  useEffect(() => {
    if (!button) {
      return
    }

    const onClick = (event: MouseEvent) => {
      event.stopPropagation()

      const template = templates.find((n) => n.id === object.id)

      if (template) {
        const { id, name, component } = template

        /**
         * –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –ø–æ API –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ.
         */
        const newComponent: RedactorComponentObject = {
          id,
          name,
          component,
          components: [],
          props: {},
        }

        addComponent(newComponent)

        closeHandler()
      }
    }

    button.addEventListener('click', onClick)

    return () => {
      button.removeEventListener('click', onClick)
    }
  }, [addComponent, button, closeHandler, object.id, templates])

  const [deleteMutation] = useDeleteLandingTemplateMutation({})

  const deleteTemplate = useCallback(() => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω? –≠—Ç–æ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.')) {
      deleteMutation({
        variables: {
          id: object.id,
        },
      }).then(() => {
        apolloClient.resetStore().catch(console.error)
      })
    }
  }, [apolloClient, deleteMutation, object.id])

  const Component = context?.getRedactorObjectComponent({
    object,
  })

  /**
   * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ —à–∏—Ä–∏–Ω–µ.
   * –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–ª–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏ –Ω–µ –ø–æ–º–µ—â–∞—Ç—å—Å—è –≤
   * —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫.
   * –î–µ–ª–∞–µ–º —Ç–æ–≥–¥–∞ —Å–∫–µ–π–ª.
   */
  useEffect(() => {
    if (!button) {
      return
    }

    const width = button.offsetWidth

    button.childNodes.forEach((node) => {
      if (node instanceof HTMLElement) {
        const nodeWidth = node.offsetWidth

        if (nodeWidth > width) {
          const scale = width / nodeWidth

          node.style.transform = `scale(${scale})`
          node.style.transformOrigin = 'left'
        }
      }
    })
  }, [button])

  if (!Component) {
    return null
  }

  return (
    <SavedBlockStyled>
      <div className="toolbar">
        <IconButton title="–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω" onClick={deleteTemplate}>
          üóë
        </IconButton>
      </div>
      <SavedBlockButtonStyled ref={buttonSetter}>
        <Component
          object={object}
          inEditMode={false}
          isDirty={undefined}
          // eslint-disable-next-line no-console
          updateObject={console.log}
          updateTemplate={undefined}
          wrapperContainer={undefined}
        />
      </SavedBlockButtonStyled>
    </SavedBlockStyled>
  )
}
